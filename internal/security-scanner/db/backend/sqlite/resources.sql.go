// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: resources.sql

package sqlite

import (
	"context"
)

const deleteResourceLabels = `-- name: DeleteResourceLabels :exec
DELETE FROM resource_labels WHERE resource_id = ?
`

func (q *Queries) DeleteResourceLabels(ctx context.Context, resourceID int64) error {
	_, err := q.db.ExecContext(ctx, deleteResourceLabels, resourceID)
	return err
}

const getResource = `-- name: GetResource :one
SELECT id, resource_type, resource_namespace, resource_name, resource_uid, resource_version, created_at, updated_at FROM resources WHERE id = ?
`

func (q *Queries) GetResource(ctx context.Context, id int64) (Resource, error) {
	row := q.db.QueryRowContext(ctx, getResource, id)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.ResourceType,
		&i.ResourceNamespace,
		&i.ResourceName,
		&i.ResourceUid,
		&i.ResourceVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getResourceLabels = `-- name: GetResourceLabels :many
SELECT label_key, label_value FROM resource_labels WHERE resource_id = ?
`

type GetResourceLabelsRow struct {
	LabelKey   string `json:"label_key"`
	LabelValue string `json:"label_value"`
}

func (q *Queries) GetResourceLabels(ctx context.Context, resourceID int64) ([]GetResourceLabelsRow, error) {
	rows, err := q.db.QueryContext(ctx, getResourceLabels, resourceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetResourceLabelsRow{}
	for rows.Next() {
		var i GetResourceLabelsRow
		if err := rows.Scan(&i.LabelKey, &i.LabelValue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertResourceLabel = `-- name: InsertResourceLabel :exec
INSERT INTO resource_labels (resource_id, label_key, label_value)
VALUES (?, ?, ?)
ON CONFLICT(resource_id, label_key) DO UPDATE SET label_value = excluded.label_value
`

type InsertResourceLabelParams struct {
	ResourceID int64  `json:"resource_id"`
	LabelKey   string `json:"label_key"`
	LabelValue string `json:"label_value"`
}

func (q *Queries) InsertResourceLabel(ctx context.Context, arg InsertResourceLabelParams) error {
	_, err := q.db.ExecContext(ctx, insertResourceLabel, arg.ResourceID, arg.LabelKey, arg.LabelValue)
	return err
}

const upsertResource = `-- name: UpsertResource :one
INSERT INTO resources (resource_type, resource_namespace, resource_name, resource_uid, resource_version)
VALUES (?, ?, ?, ?, ?)
ON CONFLICT(resource_type, resource_namespace, resource_name) 
DO UPDATE SET 
  resource_version = excluded.resource_version,
  resource_uid = excluded.resource_uid,
  updated_at = CURRENT_TIMESTAMP
RETURNING id
`

type UpsertResourceParams struct {
	ResourceType      string `json:"resource_type"`
	ResourceNamespace string `json:"resource_namespace"`
	ResourceName      string `json:"resource_name"`
	ResourceUid       string `json:"resource_uid"`
	ResourceVersion   string `json:"resource_version"`
}

func (q *Queries) UpsertResource(ctx context.Context, arg UpsertResourceParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, upsertResource,
		arg.ResourceType,
		arg.ResourceNamespace,
		arg.ResourceName,
		arg.ResourceUid,
		arg.ResourceVersion,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

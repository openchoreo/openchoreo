// Copyright 2025 The OpenChoreo Authors
// SPDX-License-Identifier: Apache-2.0

package engines

import (
	"context"

	"sigs.k8s.io/controller-runtime/pkg/client"

	openchoreov1alpha1 "github.com/openchoreo/openchoreo/api/v1alpha1"
)

// BuildEngine defines the interface for different build engines (Argo, Tekton, etc.)
type BuildEngine interface {
	// GetName returns the name of the build engine
	GetName() string

	// EnsurePrerequisites creates any prerequisite resources needed for the build
	EnsurePrerequisites(ctx context.Context, client client.Client, build *openchoreov1alpha1.Build) error

	// CreateBuild creates a build workflow/pipeline using the specific engine
	CreateBuild(ctx context.Context, client client.Client, build *openchoreov1alpha1.Build) (BuildCreationResponse, error)

	// GetBuildStatus retrieves the current status of the build
	GetBuildStatus(ctx context.Context, client client.Client, build *openchoreov1alpha1.Build) (BuildStatus, error)

	// ExtractBuildArtifacts extracts artifacts (like image name, workload CR) from completed build
	ExtractBuildArtifacts(ctx context.Context, client client.Client, build *openchoreov1alpha1.Build) (*BuildArtifacts, error)
}

// BuildCreationResponse contains information about a created build
type BuildCreationResponse struct {
	// ID is the unique identifier for the build
	ID string
	// Created indicates if this was a new build or existing one
	Created bool
}

// BuildStatus represents the current status of a build
type BuildStatus struct {
	// Phase represents the current phase of the build
	Phase BuildPhase
	// Message provides additional details about the current state
	Message string
}

// BuildPhase represents the different phases a build can be in
type BuildPhase string

const (
	BuildPhaseRunning   BuildPhase = "Running"
	BuildPhaseSucceeded BuildPhase = "Succeeded"
	BuildPhaseFailed    BuildPhase = "Failed"
	BuildPhaseUnknown   BuildPhase = "Unknown"
)

// BuildArtifacts contains the artifacts produced by a successful build
type BuildArtifacts struct {
	// Image is the built container image
	Image string
	// WorkloadCR is the workload custom resource generated by the build
	WorkloadCR string
}

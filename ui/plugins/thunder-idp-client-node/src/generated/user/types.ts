/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List users */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of records to return. */
          limit?: components['parameters']['limitQueryParam'];
          /** @description Number of records to skip for pagination. */
          offset?: components['parameters']['offsetQueryParam'];
          /**
           * @description Filter users by attribute values.
           *     Supported operators: eq (ie. equals).
           *     Format: `attribute operator "value"`.
           *     Examples:
           *     - `username eq "john.doe"` - Users with username = "john.doe"'
           *     - `age eq 25` - Users with age = 25
           *     - `address.city eq "Mountain View"` - Users with address.city = "Mountain View"
           */
          filter?: components['parameters']['filterParam'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of users */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "totalResults": 5,
             *       "startIndex": 1,
             *       "count": 3,
             *       "users": [
             *         {
             *           "id": "9a475e1e-b0cb-4b29-8df5-2e5b24fb0ed3",
             *           "organizationUnit": "456e8400-e29b-41d4-a716-446655440001",
             *           "type": "customer",
             *           "attributes": {
             *             "age": 24,
             *             "email": "jane.doe@example.com",
             *             "mobile": "+1-650-555-1234",
             *             "address": {
             *               "city": "Mountain View",
             *               "zip": "94040"
             *             },
             *             "contactPreferences": [
             *               "email",
             *               "sms"
             *             ]
             *           }
             *         },
             *         {
             *           "id": "039bda67-a80d-4b7b-ac0f-36db85332089",
             *           "organizationUnit": "456e8400-e29b-41d4-a716-446655440001",
             *           "type": "customer",
             *           "attributes": {
             *             "age": 31,
             *             "email": "john.smith@example.com",
             *             "mobile": "+1-650-903-0002",
             *             "address": {
             *               "city": "Palo Alto",
             *               "zip": "94301"
             *             },
             *             "contactPreferences": [
             *               "sms"
             *             ]
             *           }
             *         },
             *         {
             *           "id": "e1b6ba6c-deb2-4d24-87b0-bbf79fa4487c",
             *           "organizationUnit": "26eec421-f1bb-4deb-a5d3-9ab6554c2ae6",
             *           "type": "employee",
             *           "attributes": {
             *             "username": "alice.wu",
             *             "firstname": "Alice",
             *             "lastname": "Wu",
             *             "department": "Engineering",
             *             "email": "alice.wu@company.inc"
             *           }
             *         }
             *       ],
             *       "links": [
             *         {
             *           "href": "users?offset=3&limit=3",
             *           "rel": "next"
             *         }
             *       ]
             *     }
             */
            'application/json': components['schemas']['UserListResponse'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Create a new user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          /**
           * @example {
           *       "organizationUnit": "456e8400-e29b-41d4-a716-446655440001",
           *       "type": "customer",
           *       "groups": [
           *         "550e8400-e29b-41d4-a716-446655440000",
           *         "660e8400-e29b-41d4-a716-446655440001"
           *       ],
           *       "attributes": {
           *         "age": 24,
           *         "email": "jane.doe@example.com",
           *         "mobile": "+1-650-555-1234",
           *         "address": {
           *           "city": "Mountain View",
           *           "zip": "94040"
           *         },
           *         "contactPreferences": [
           *           "email",
           *           "sms"
           *         ]
           *       }
           *     }
           */
          'application/json': components['schemas']['CreateUserRequest'];
        };
      };
      responses: {
        /** @description User created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "id": "9a475e1e-b0cb-4b29-8df5-2e5b24fb0ed3",
             *       "organizationUnit": "456e8400-e29b-41d4-a716-446655440001",
             *       "type": "customer",
             *       "attributes": {
             *         "age": 24,
             *         "email": "jane.doe@example.com",
             *         "mobile": "+1-650-555-1234",
             *         "address": {
             *           "city": "Mountain View",
             *           "zip": "94040"
             *         },
             *         "contactPreferences": [
             *           "email",
             *           "sms"
             *         ]
             *       }
             *     }
             */
            'application/json': components['schemas']['User'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Conflict */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a user by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @example 9a475e1e-b0cb-4b29-8df5-2e5b24fb0ed3 */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "id": "9a475e1e-b0cb-4b29-8df5-2e5b24fb0ed3",
             *       "organizationUnit": "456e8400-e29b-41d4-a716-446655440001",
             *       "type": "customer",
             *       "attributes": {
             *         "age": 24,
             *         "email": "jane.doe@example.com",
             *         "mobile": "+1-650-555-1234",
             *         "address": {
             *           "city": "Mountain View",
             *           "zip": "94040"
             *         },
             *         "contactPreferences": [
             *           "email",
             *           "sms"
             *         ]
             *       }
             *     }
             */
            'application/json': components['schemas']['User'];
          };
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Update a user by id */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @example 9a475e1e-b0cb-4b29-8df5-2e5b24fb0ed3 */
          id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          /**
           * @example {
           *       "organizationUnit": "456e8400-e29b-41d4-a716-446655440001",
           *       "type": "customer",
           *       "groups": [
           *         "550e8400-e29b-41d4-a716-446655440000"
           *       ],
           *       "attributes": {
           *         "age": 25,
           *         "email": "jane.doe@example.com",
           *         "mobile": "+1-650-555-5678",
           *         "address": {
           *           "city": "Mountain View",
           *           "zip": "94040"
           *         },
           *         "contactPreferences": [
           *           "email"
           *         ]
           *       }
           *     }
           */
          'application/json': components['schemas']['UpdateUserRequest'];
        };
      };
      responses: {
        /** @description User updated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "id": "9a475e1e-b0cb-4b29-8df5-2e5b24fb0ed3",
             *       "organizationUnit": "456e8400-e29b-41d4-a716-446655440001",
             *       "type": "customer",
             *       "attributes": {
             *         "age": 25,
             *         "email": "jane.doe@example.com",
             *         "mobile": "+1-650-555-5678",
             *         "address": {
             *           "city": "Mountain View",
             *           "zip": "94040"
             *         },
             *         "contactPreferences": [
             *           "email"
             *         ]
             *       }
             *     }
             */
            'application/json': components['schemas']['User'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "USR-1003",
             *       "message": "User not found",
             *       "description": "The user with the specified id does not exist"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** Delete a user by id */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @example 9a475e1e-b0cb-4b29-8df5-2e5b24fb0ed3 */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/{id}/groups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List groups that the user belongs to */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of records to return. */
          limit?: components['parameters']['limitQueryParam'];
          /** @description Number of records to skip for pagination. */
          offset?: components['parameters']['offsetQueryParam'];
        };
        header?: never;
        path: {
          /**
           * @description The unique identifier of the user
           * @example 9a475e1e-b0cb-4b29-8df5-2e5b24fb0ed3
           */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of groups that the user belongs to */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "totalResults": 3,
             *       "startIndex": 1,
             *       "count": 2,
             *       "groups": [
             *         {
             *           "id": "550e8400-e29b-41d4-a716-446655440000",
             *           "name": "Premium Customers",
             *           "organizationUnit": "456e8400-e29b-41d4-a716-446655440001"
             *         },
             *         {
             *           "id": "660e8400-e29b-41d4-a716-446655440001",
             *           "name": "Mobile App Users",
             *           "organizationUnit": "456e8400-e29b-41d4-a716-446655440001"
             *         }
             *       ],
             *       "links": [
             *         {
             *           "href": "users/9a475e1e-b0cb-4b29-8df5-2e5b24fb0ed3/groups?offset=2&limit=2",
             *           "rel": "next"
             *         }
             *       ]
             *     }
             */
            'application/json': components['schemas']['UserGroupListResponse'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "USR-1003",
             *       "message": "User not found",
             *       "description": "The user with the specified id does not exist"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "USR-5001",
             *       "message": "Internal server error",
             *       "description": "An unexpected error occurred while processing the request"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/tree/{path}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List users in organization unit specified by handle path */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of records to return. */
          limit?: components['parameters']['limitQueryParam'];
          /** @description Number of records to skip for pagination. */
          offset?: components['parameters']['offsetQueryParam'];
          /**
           * @description Filter users by attribute values.
           *     Supported operators: eq (ie. equals).
           *     Format: `attribute operator "value"`.
           *     Examples:
           *     - `username eq "john.doe"` - Users with username = "john.doe"'
           *     - `age eq 25` - Users with age = 25
           *     - `address.city eq "Mountain View"` - Users with address.city = "Mountain View"
           */
          filter?: components['parameters']['filterParam'];
        };
        header?: never;
        path: {
          /**
           * @description Hierarchical path of organization unit handles separated by forward slashes.
           *     Examples:
           *     - `engineering` - Lists users in the "engineering" OU
           *     - `engineering/frontend` - Lists users in "engineering/frontend"
           * @example engineering/frontend
           */
          path: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of users in the organization unit */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "totalResults": 5,
             *       "startIndex": 1,
             *       "count": 2,
             *       "users": [
             *         {
             *           "id": "7a4b1f8e-5c69-4b60-9232-2b0aaf65ef3c"
             *         },
             *         {
             *           "id": "9f1e47d3-0347-4464-9f02-e0bfae02e896"
             *         }
             *       ],
             *       "links": [
             *         {
             *           "href": "users/tree/engineering/frontend?offset=10&limit=10",
             *           "rel": "next"
             *         }
             *       ]
             *     }
             */
            'application/json': components['schemas']['UserListResponse'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Organization unit not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /** @example Internal server error */
            'text/plain': string;
          };
        };
      };
    };
    put?: never;
    /** Create a new user under the organization unit specified by the handle path */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description Hierarchical path of organization unit handles separated by forward slashes.
           *     The new user will be created under the organization unit specified by this path.
           *     Examples:
           *     - `engineering` - Creates a new user under the "engineering" OU
           *     - `engineering/frontend` - Creates a new user under "engineering/frontend"
           * @example engineering/frontend
           */
          path: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          /**
           * @example {
           *       "organizationUnit": "a839f4bd-39dc-4eaa-b5cc-210d8ecaee87",
           *       "type": "employee",
           *       "groups": [
           *         "880e8400-e29b-41d4-a716-446655440003",
           *         "990e8400-e29b-41d4-a716-446655440004"
           *       ],
           *       "attributes": {
           *         "username": "john.doe",
           *         "firstname": "John",
           *         "lastname": "Doe",
           *         "email": "john.doe@company.com",
           *         "department": "Engineering"
           *       }
           *     }
           */
          'application/json': components['schemas']['CreateUserByPathRequest'];
        };
      };
      responses: {
        /** @description User created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "id": "7a4b1f8e-5c69-4b60-9232-2b0aaf65ef3c",
             *       "organizationUnit": "a839f4bd-39dc-4eaa-b5cc-210d8ecaee87",
             *       "type": "employee",
             *       "attributes": {
             *         "username": "john.doe",
             *         "firstname": "John",
             *         "lastname": "Doe",
             *         "email": "john.doe@company.com",
             *         "department": "Engineering"
             *       }
             *     }
             */
            'application/json': components['schemas']['User'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Organization unit not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Conflict */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /** @example Internal server error */
            'text/plain': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user-schemas': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List user type schemas
     * @description Retrieves a list of all user type schemas that define the structure
     *     and attributes for different user types.
     */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of records to return. */
          limit?: components['parameters']['limitQueryParam'];
          /** @description Number of records to skip for pagination. */
          offset?: components['parameters']['offsetQueryParam'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of user type schemas */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "totalResults": 3,
             *       "startIndex": 1,
             *       "count": 3,
             *       "schemas": [
             *         {
             *           "id": "660e8400-e29b-41d4-a716-446655440001",
             *           "name": "employee"
             *         },
             *         {
             *           "id": "550e8400-e29b-41d4-a716-446655440000",
             *           "name": "customer"
             *         },
             *         {
             *           "id": "770e8400-e29b-41d4-a716-446655440002",
             *           "name": "partner"
             *         }
             *       ]
             *     }
             */
            'application/json': components['schemas']['UserSchemaListResponse'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create a new user type schema
     * @description Creates a new user type schema that defines the structure and attributes
     *     for a specific user type.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          /**
           * @example {
           *       "name": "partner",
           *       "schema": {
           *         "firstname": {
           *           "type": "string"
           *         },
           *         "lastname": {
           *           "type": "string",
           *           "required": true
           *         },
           *         "email": {
           *           "type": "string",
           *           "required": true,
           *           "unique": true
           *         },
           *         "company": {
           *           "type": "string"
           *         },
           *         "role": {
           *           "type": "string"
           *         },
           *         "partnershipType": {
           *           "type": "string",
           *           "enum": [
           *             "technology",
           *             "business",
           *             "strategic"
           *           ]
           *         },
           *         "phoneNumber": {
           *           "type": "string"
           *         }
           *       }
           *     }
           */
          'application/json': components['schemas']['CreateUserSchemaRequest'];
        };
      };
      responses: {
        /** @description User schema created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "id": "880e8400-e29b-41d4-a716-446655440003",
             *       "name": "partner",
             *       "schema": {
             *         "firstname": {
             *           "type": "string"
             *         },
             *         "lastname": {
             *           "type": "string",
             *           "required": true
             *         },
             *         "email": {
             *           "type": "string",
             *           "required": true,
             *           "unique": true
             *         },
             *         "company": {
             *           "type": "string"
             *         },
             *         "role": {
             *           "type": "string"
             *         },
             *         "partnershipType": {
             *           "type": "string",
             *           "enum": [
             *             "technology",
             *             "business",
             *             "strategic"
             *           ]
             *         },
             *         "phoneNumber": {
             *           "type": "string"
             *         }
             *       }
             *     }
             */
            'application/json': components['schemas']['UserSchema'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Conflict */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "USRS-1003",
             *       "message": "User schema name conflict",
             *       "description": "A user schema with the same name already exists"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user-schemas/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a user type schema by ID
     * @description Retrieves the details of a specific user type schema by its ID.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @example 550e8400-e29b-41d4-a716-446655440000 */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User schema details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UserSchema'];
          };
        };
        /** @description User schema not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "USRS-1002",
             *       "message": "User schema not found",
             *       "description": "The user schema with the specified id does not exist"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update a user type schema by ID
     * @description Updates an existing user type schema with new attribute definitions.
     *     This operation replaces the entire schema definition.
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @example 550e8400-e29b-41d4-a716-446655440000 */
          id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          /**
           * @example {
           *       "name": "customer",
           *       "schema": {
           *         "email": {
           *           "type": "string",
           *           "required": true,
           *           "unique": true
           *         },
           *         "age": {
           *           "type": "number"
           *         },
           *         "mobile": {
           *           "type": "string"
           *         },
           *         "preferredLanguage": {
           *           "type": "string",
           *           "enum": [
           *             "en",
           *             "es",
           *             "fr",
           *             "de",
           *             "it"
           *           ]
           *         },
           *         "loyaltyTier": {
           *           "type": "string",
           *           "enum": [
           *             "bronze",
           *             "silver",
           *             "gold",
           *             "platinum"
           *           ]
           *         }
           *       }
           *     }
           */
          'application/json': components['schemas']['UpdateUserSchemaRequest'];
        };
      };
      responses: {
        /** @description User schema updated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "id": "550e8400-e29b-41d4-a716-446655440000",
             *       "name": "customer",
             *       "schema": {
             *         "email": {
             *           "type": "string",
             *           "required": true,
             *           "unique": true
             *         },
             *         "age": {
             *           "type": "number"
             *         },
             *         "mobile": {
             *           "type": "string"
             *         },
             *         "preferredLanguage": {
             *           "type": "string",
             *           "enum": [
             *             "en",
             *             "es",
             *             "fr",
             *             "de",
             *             "it"
             *           ]
             *         },
             *         "loyaltyTier": {
             *           "type": "string",
             *           "enum": [
             *             "bronze",
             *             "silver",
             *             "gold",
             *             "platinum"
             *           ]
             *         }
             *       }
             *     }
             */
            'application/json': components['schemas']['UserSchema'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description User schema not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "USRS-1002",
             *       "message": "User schema not found",
             *       "description": "The user schema with the specified id does not exist"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description User schema name already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "USRS-1003",
             *       "message": "User schema name conflict",
             *       "description": "A user schema with the same name already exists"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /**
     * Delete a user type schema by ID
     * @description Deletes a user type schema. This operation will fail if there are
     *     existing users of this type.
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @example 550e8400-e29b-41d4-a716-446655440000 */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User schema deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "USRS-1004",
             *       "message": "Invalid user schema request",
             *       "description": "Cannot delete schema because users of this type exist"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    User: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      organizationUnit?: string;
      type?: string;
      attributes?: {
        [key: string]: unknown;
      };
    };
    Link: {
      /** @example organization-units?offset=20&limit=10 */
      href?: string;
      /** @example next */
      rel?: string;
    };
    UserGroup: {
      /**
       * Format: uuid
       * @description The unique identifier of the group
       */
      id: string;
      /** @description The name of the group */
      name: string;
      /**
       * Format: uuid
       * @description The organization unit ID that the group belongs to
       */
      organizationUnit: string;
    };
    UserListResponse: {
      /**
       * @description Number of results that match the listing operation.
       * @example 25
       */
      totalResults?: number;
      /**
       * @description Index of the first element of the page, which will be equal to offset + 1.
       * @example 1
       */
      startIndex?: number;
      /**
       * @description Number of elements in the returned page.
       * @example 10
       */
      count?: number;
      users?: components['schemas']['User'][];
      links?: components['schemas']['Link'][];
    };
    UserGroupListResponse: {
      /**
       * @description Number of results that match the listing operation.
       * @example 8
       */
      totalResults?: number;
      /**
       * @description Index of the first element of the page, which will be equal to offset + 1.
       * @example 1
       */
      startIndex?: number;
      /**
       * @description Number of elements in the returned page.
       * @example 5
       */
      count?: number;
      groups?: components['schemas']['UserGroup'][];
      links?: components['schemas']['Link'][];
    };
    CreateUserByPathRequest: {
      /**
       * @description The type of user
       * @example employee
       */
      type: string;
      /** @description List of groups that the user should belong to */
      groups?: string[];
      /**
       * @description User attributes
       * @example {
       *       "username": "john.doe",
       *       "firstname": "John",
       *       "lastname": "Doe",
       *       "email": "john.doe@company.com",
       *       "department": "Engineering"
       *     }
       */
      attributes?: {
        [key: string]: unknown;
      };
    };
    CreateUserRequest: {
      /**
       * Format: uuid
       * @description The organization unit ID where the user will be created
       */
      organizationUnit: string;
      /**
       * @description The type of user
       * @example customer
       */
      type: string;
      /** @description List of groups that the user should belong to */
      groups?: string[];
      /** @description User attributes */
      attributes?: {
        [key: string]: unknown;
      };
    };
    UpdateUserRequest: {
      /**
       * Format: uuid
       * @description The organization unit ID where the user belongs
       */
      organizationUnit?: string;
      /** @description The type of user */
      type?: string;
      /** @description List of groups that the user should belong to */
      groups?: string[];
      /** @description User attributes */
      attributes?: {
        [key: string]: unknown;
      };
    };
    UserSchema: {
      /**
       * Format: uuid
       * @description The unique identifier of the user schema
       */
      id: string;
      /** @description The user type this schema defines */
      name: string;
      /**
       * @description JSON Schema definition for the user type
       * @example {
       *       "email": {
       *         "type": "string",
       *         "required": true,
       *         "unique": true,
       *         "regex": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
       *       },
       *       "password": {
       *         "type": "string",
       *         "required": true,
       *         "regex": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{8,}$"
       *       },
       *       "age": {
       *         "type": "number"
       *       },
       *       "isActive": {
       *         "type": "boolean"
       *       },
       *       "phoneNumber": {
       *         "type": "string",
       *         "regex": "^\\+?[1-9]\\d{1,14}$"
       *       },
       *       "role": {
       *         "type": "string",
       *         "enum": [
       *           "admin",
       *           "user",
       *           "guest"
       *         ]
       *       },
       *       "address": {
       *         "type": "object",
       *         "required": true,
       *         "properties": {
       *           "street": {
       *             "type": "string"
       *           },
       *           "city": {
       *             "type": "string",
       *             "required": true
       *           },
       *           "zipCode": {
       *             "type": "string",
       *             "regex": "^\\d{5}(-\\d{4})?$"
       *           }
       *         }
       *       },
       *       "tags": {
       *         "type": "array",
       *         "items": {
       *           "type": "string",
       *           "enum": [
       *             "vip",
       *             "premium",
       *             "standard"
       *           ]
       *         }
       *       }
       *     }
       */
      schema: {
        [key: string]:
          | {
              /**
               * @description Data type of the property
               * @enum {string}
               */
              type: 'string' | 'number' | 'boolean';
              /**
               * @description Whether this attribute must be provided for the user type
               * @default false
               */
              required: boolean;
              /**
               * @description Whether this property must be unique across all users
               * @default false
               */
              unique: boolean;
              /** @description List of allowed values for this property */
              enum?: string[];
              /** @description Regular expression pattern for validating the property value */
              regex?: string;
            }
          | {
              /**
               * @description Data type (object)
               * @enum {string}
               */
              type: 'object';
              /**
               * @description Whether this attribute must be provided for the user type
               * @default false
               */
              required: boolean;
              /** @description Nested properties of the object */
              properties: {
                [
                  key: string
                ]: components['schemas']['UserSchema']['schema']['additionalProperties'];
              };
            }
          | {
              /**
               * @description Data type (array)
               * @enum {string}
               */
              type: 'array';
              /**
               * @description Whether this attribute must be provided for the user type
               * @default false
               */
              required: boolean;
              items:
                | {
                    /** @enum {string} */
                    type: 'string' | 'number' | 'boolean';
                    enum?: string[];
                  }
                | {
                    /** @enum {string} */
                    type: 'object';
                    properties: {
                      [
                        key: string
                      ]: components['schemas']['UserSchema']['schema']['additionalProperties'];
                    };
                  };
            };
      };
    };
    UserSchemaListResponse: {
      /**
       * @description Number of results that match the listing operation.
       * @example 5
       */
      totalResults?: number;
      /**
       * @description Index of the first element of the page, which will be equal to offset + 1.
       * @example 1
       */
      startIndex?: number;
      /**
       * @description Number of elements in the returned page.
       * @example 3
       */
      count?: number;
      schemas?: {
        /**
         * Format: uuid
         * @description The unique identifier of the user schema
         */
        id: string;
        /** @description The user type this schema defines */
        name: string;
      }[];
      links?: components['schemas']['Link'][];
    };
    CreateUserSchemaRequest: {
      /** @description The user type this schema will define */
      name: string;
      /** @description JSON Schema definition for the user type */
      schema: {
        [
          key: string
        ]: components['schemas']['UserSchema']['schema']['additionalProperties'];
      };
    };
    UpdateUserSchemaRequest: {
      /** @description The user type this schema defines */
      name: string;
      /** @description JSON Schema definition for the user type */
      schema: {
        [
          key: string
        ]: components['schemas']['UserSchema']['schema']['additionalProperties'];
      };
    };
    Error: {
      code: string;
      message: string;
      description?: string;
    };
  };
  responses: never;
  parameters: {
    /** @description Maximum number of records to return. */
    limitQueryParam: number;
    /** @description Number of records to skip for pagination. */
    offsetQueryParam: number;
    /**
     * @description Filter users by attribute values.
     *     Supported operators: eq (ie. equals).
     *     Format: `attribute operator "value"`.
     *     Examples:
     *     - `username eq "john.doe"` - Users with username = "john.doe"'
     *     - `age eq 25` - Users with age = 25
     *     - `address.city eq "Mountain View"` - Users with address.city = "Mountain View"
     */
    filterParam: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/groups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List groups */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of records to return. */
          limit?: components['parameters']['limitQueryParam'];
          /** @description Number of records to skip for pagination. */
          offset?: components['parameters']['offsetQueryParam'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of groups */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "totalResults": 5,
             *       "startIndex": 1,
             *       "count": 2,
             *       "groups": [
             *         {
             *           "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
             *           "name": "Sports",
             *           "description": "Sports group",
             *           "organizationUnitId": "a839f4bd-39dc-4eaa-b5cc-210d8ecaee87"
             *         },
             *         {
             *           "id": "257e528f-eb24-48b6-884d-20460e190957",
             *           "name": "Managers",
             *           "description": "Manager group",
             *           "organizationUnitId": "a839f4bd-39dc-4eaa-b5cc-210d8ecaee87"
             *         }
             *       ],
             *       "links": [
             *         {
             *           "href": "groups?offset=2&limit=2",
             *           "rel": "next"
             *         }
             *       ]
             *     }
             */
            'application/json': components['schemas']['GroupListResponse'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /** @example Internal server error */
            'text/plain': string;
          };
        };
      };
    };
    put?: never;
    /** Create a new group */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          /**
           * @example {
           *       "name": "Sports",
           *       "description": "Sports group",
           *       "organizationUnitId": "a839f4bd-39dc-4eaa-b5cc-210d8ecaee87",
           *       "members": [
           *         {
           *           "type": "user",
           *           "id": "7a4b1f8e-5c69-4b60-9232-2b0aaf65ef3c"
           *         },
           *         {
           *           "type": "user",
           *           "id": "9f1e47d3-0347-4464-9f02-e0bfae02e896"
           *         },
           *         {
           *           "type": "group",
           *           "id": "6b1e7b8d-7e19-41eb-8fa2-c0ee5bb67a94"
           *         }
           *       ]
           *     }
           */
          'application/json': components['schemas']['CreateGroupRequest'];
        };
      };
      responses: {
        /** @description Group created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
             *       "name": "Sports",
             *       "description": "Sports group",
             *       "organizationUnitId": "a839f4bd-39dc-4eaa-b5cc-210d8ecaee87"
             *     }
             */
            'application/json': components['schemas']['Group'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Conflict */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "GRP-1004",
             *       "message": "Group name conflict",
             *       "description": "A group with the same name exists under the same organization unit"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /** @example Internal server error */
            'text/plain': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/groups/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a group by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Group details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
             *       "name": "Sports",
             *       "description": "Sports group",
             *       "organizationUnitId": "a839f4bd-39dc-4eaa-b5cc-210d8ecaee87"
             *     }
             */
            'application/json': components['schemas']['Group'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "GRP-1002",
             *       "message": "Invalid request format",
             *       "description": "Group ID is required"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Group not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "GRP-1003",
             *       "message": "Group not found",
             *       "description": "The group with the specified id does not exist"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /** @example Internal server error */
            'text/plain': string;
          };
        };
      };
    };
    /** Update a group by id */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          /**
           * @example {
           *       "name": "Activities",
           *       "description": "Activities group",
           *       "organizationUnitId": "a839f4bd-39dc-4eaa-b5cc-210d8ecaee87",
           *       "members": [
           *         {
           *           "type": "user",
           *           "id": "7a4b1f8e-5c69-4b60-9232-2b0aaf65ef3c"
           *         },
           *         {
           *           "type": "user",
           *           "id": "9f1e47d3-0347-4464-9f02-e0bfae02e896"
           *         },
           *         {
           *           "type": "group",
           *           "id": "6b1e7b8d-7e19-41eb-8fa2-c0ee5bb67a94"
           *         }
           *       ]
           *     }
           */
          'application/json': components['schemas']['UpdateGroupRequest'];
        };
      };
      responses: {
        /** @description Group updated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
             *       "name": "Activities",
             *       "description": "Activities group",
             *       "organizationUnitId": "a839f4bd-39dc-4eaa-b5cc-210d8ecaee87"
             *     }
             */
            'application/json': components['schemas']['Group'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Group not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "GRP-1003",
             *       "message": "Group not found",
             *       "description": "The group with the specified id does not exist"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Conflict */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "GRP-1004",
             *       "message": "Group name conflict",
             *       "description": "A group with the same name exists under the same organization unit"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /** @example Internal server error */
            'text/plain': string;
          };
        };
      };
    };
    post?: never;
    /** Delete a group by id */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Group deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /** @example Internal server error */
            'text/plain': string;
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/groups/{id}/members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List members in group */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of records to return. */
          limit?: components['parameters']['limitQueryParam'];
          /** @description Number of records to skip for pagination. */
          offset?: components['parameters']['offsetQueryParam'];
        };
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of members in the group */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "totalResults": 5,
             *       "startIndex": 1,
             *       "count": 2,
             *       "members": [
             *         {
             *           "type": "user",
             *           "id": "7a4b1f8e-5c69-4b60-9232-2b0aaf65ef3c"
             *         },
             *         {
             *           "type": "group",
             *           "id": "8c2f8e9e-8f2a-4f5b-9c3d-4e5f6a7b8c9d"
             *         }
             *       ],
             *       "links": [
             *         {
             *           "href": "groups/3fa85f64-5717-4562-b3fc-2c963f66afa6/members?offset=2&limit=2",
             *           "rel": "next"
             *         }
             *       ]
             *     }
             */
            'application/json': components['schemas']['MemberListResponse'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Group not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "GRP-1003",
             *       "message": "Group not found",
             *       "description": "The group with the specified id does not exist"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /** @example Internal server error */
            'text/plain': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/groups/tree/{path}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List groups in organization unit specified by handle path */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of records to return. */
          limit?: components['parameters']['limitQueryParam'];
          /** @description Number of records to skip for pagination. */
          offset?: components['parameters']['offsetQueryParam'];
        };
        header?: never;
        path: {
          /**
           * @description Hierarchical path of organization unit handles separated by forward slashes.
           *     Examples:
           *     - `engineering` - Lists groups in the "engineering" OU
           *     - `engineering/frontend` - Lists groups in "engineering/frontend"
           * @example engineering/frontend
           */
          path: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of groups in the organization unit */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "totalResults": 5,
             *       "startIndex": 1,
             *       "count": 2,
             *       "groups": [
             *         {
             *           "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
             *           "name": "Sports",
             *           "description": "Sports group",
             *           "organizationUnitId": "a839f4bd-39dc-4eaa-b5cc-210d8ecaee87"
             *         },
             *         {
             *           "id": "257e528f-eb24-48b6-884d-20460e190957",
             *           "name": "Managers",
             *           "description": "Manager group",
             *           "organizationUnitId": "a839f4bd-39dc-4eaa-b5cc-210d8ecaee87"
             *         }
             *       ],
             *       "links": [
             *         {
             *           "href": "groups/tree/engineering/frontend?offset=2&limit=2",
             *           "rel": "next"
             *         }
             *       ]
             *     }
             */
            'application/json': components['schemas']['GroupListResponse'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Organization unit not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /** @example Internal server error */
            'text/plain': string;
          };
        };
      };
    };
    put?: never;
    /** Create a new group under the organization unit specified by the handle path */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description Hierarchical path of organization unit handles separated by forward slashes.
           *     The new group will be created under the organization unit specified by this path.
           *     Examples:
           *     - `engineering` - Creates a new group under the "engineering" OU
           *     - `engineering/frontend` - Creates a new group under "engineering/frontend"
           * @example engineering/frontend
           */
          path: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          /**
           * @example {
           *       "name": "Sports",
           *       "description": "Sports group",
           *       "members": [
           *         {
           *           "type": "user",
           *           "id": "7a4b1f8e-5c69-4b60-9232-2b0aaf65ef3c"
           *         },
           *         {
           *           "type": "user",
           *           "id": "9f1e47d3-0347-4464-9f02-e0bfae02e896"
           *         },
           *         {
           *           "type": "group",
           *           "id": "6b1e7b8d-7e19-41eb-8fa2-c0ee5bb67a94"
           *         }
           *       ]
           *     }
           */
          'application/json': components['schemas']['CreateGroupByPathRequest'];
        };
      };
      responses: {
        /** @description Group created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
             *       "name": "Sports",
             *       "description": "Sports group",
             *       "organizationUnitId": "a839f4bd-39dc-4eaa-b5cc-210d8ecaee87"
             *     }
             */
            'application/json': components['schemas']['Group'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Organization unit not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Conflict */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /**
             * @example {
             *       "code": "GRP-1004",
             *       "message": "Group name conflict",
             *       "description": "A group with the same name exists under the same organization unit"
             *     }
             */
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            /** @example Internal server error */
            'text/plain': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Member: {
      /** Format: uuid */
      id: string;
      /** @enum {string} */
      type: 'user' | 'group';
    };
    Group: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string | null;
      /** Format: uuid */
      organizationUnitId: string;
      members?: components['schemas']['Member'][];
    };
    CreateGroupRequest: {
      name: string;
      description?: string;
      /** Format: uuid */
      organizationUnitId: string;
      members?: components['schemas']['Member'][];
    };
    UpdateGroupRequest: components['schemas']['CreateGroupRequest'];
    GroupListResponse: {
      /**
       * @description Number of results that match the listing operation.
       * @example 8
       */
      totalResults?: number;
      /**
       * @description Index of the first element of the page, which will be equal to offset + 1.
       * @example 1
       */
      startIndex?: number;
      /**
       * @description Number of elements in the returned page.
       * @example 5
       */
      count?: number;
      groups?: components['schemas']['Group'][];
      links?: components['schemas']['Link'][];
    };
    MemberListResponse: {
      /**
       * @description Number of results that match the listing operation.
       * @example 20
       */
      totalResults?: number;
      /**
       * @description Index of the first element of the page, which will be equal to offset + 1.
       * @example 1
       */
      startIndex?: number;
      /**
       * @description Number of elements in the returned page.
       * @example 10
       */
      count?: number;
      members?: components['schemas']['Member'][];
      links?: components['schemas']['Link'][];
    };
    CreateGroupByPathRequest: {
      /**
       * @description The display name of the group
       * @example Sports Team
       */
      name: string;
      /**
       * @description Optional description of the group
       * @example Group for sports activities and events
       */
      description?: string;
      /** @description Optional list of initial members (users and groups) */
      members?: components['schemas']['Member'][];
    };
    Link: {
      /** @example groups?offset=20&limit=10 */
      href?: string;
      /** @example next */
      rel?: string;
    };
    Error: {
      /**
       * @description Error code
       * @example GRP-1001
       */
      code: string;
      /**
       * @description Error message
       * @example Invalid request format
       */
      message: string;
      /**
       * @description Detailed error description
       * @example The request body is malformed or contains invalid data
       */
      description?: string;
    };
  };
  responses: never;
  parameters: {
    /** @description Maximum number of records to return. */
    limitQueryParam: number;
    /** @description Number of records to skip for pagination. */
    offsetQueryParam: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;

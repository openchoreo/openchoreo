# Global configuration
global:
  # -- Common labels to add to every resource.
  commonLabels: {}
  # -- WaitJob configuration
  waitJob:
    image: rancher/kubectl:v1.32.9
  # -- Configuration for the default workflow templates required for building container images.
  defaultResources:
    # -- If true, applies the workflow templates.
    enabled: true
      # -- Container registry configuration
    registry:
      # -- Type of registry to use. Supported values: "local", "external".
      # "local": Deploys a built-in registry managed by data plane Helm chart.
      # "external": Connects to a pre-existing registry you provide.
      type: local

      # -- Settings for the built-in registry.
      # These values are ONLY used if registry.type is "local".
      local:
        # -- The internal cluster address used by build pipelines (e.g., Podman) to push images.
        pushEndpoint: "registry.openchoreo-data-plane:5000"

        # -- The public-facing address used by cluster nodes (kubelet) to pull images.
        # This could be a NodePort, LoadBalancer, or Ingress address.
        pullEndpoint: "localhost:30003"

      # -- Settings for using your own external registry.
      # These values are ONLY used if registry.type is "external".
      external:
        # -- The full address of your external registry.
        # (e.g., "gcr.io/my-project", "docker.io/my-org", "my-harbor.corp:5000")
        endpoint: ""

# customizing the argo workflows configurations
argo-workflows:
  fullnameOverride: argo
  controller:
    # -- Resource limits and requests for the argo workflows controller
    resources:
      limits:
        memory: 64Mi
        cpu: 50m
      requests:
        memory: 32Mi
        cpu: 25m
  server:
    enabled: false
  crds:
    keep: false
  workflow:
    serviceAccount:
      create: true
  workflowNamespaces:
    - argo-build

fluentBit:
  enabled: false

  image:
    repository: fluent/fluent-bit
    tag: "2.1.10"
    pullPolicy: IfNotPresent

  config:
    service:
      flush: 1
      logLevel: info
      daemon: off

    input:
      name: tail
      tag: "kube.*"
      path: "/var/log/containers/*_openchoreo-*_*.log,/var/log/containers/*_openchoreo-ci-*_*.log"
      excludePath: "/var/log/containers/*opensearch*_openchoreo-observability-plane_*.log,/var/log/containers/*fluent-bit*_openchoreo-data-plane_*.log"
      parser: docker
      inotifyWatcher: false
      db: "/var/log/flb_kube.db"
      memBufLimit: "256MB"
      skipLongLines: true
      refreshInterval: 10

    filter:
      name: kubernetes
      match: "kube.*"
      kubeURL: "https://kubernetes.default.svc:443"
      kubeCAFile: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      kubeTokenFile: "/var/run/secrets/kubernetes.io/serviceaccount/token"
      kubeTagPrefix: "kube.var.log.containers."
      mergeLog: true
      mergeLogKey: "log_processed"
      k8sLoggingParser: true
      k8sLoggingExclude: false

    output:
      name: opensearch
      match: "kube.*"
      index: kubernetes_cluster
      type: flb_type
      logstashFormat: true
      logstashPrefix: kubernetes
      timeKey: "@timestamp"
      traceError: true
      suppressTypeName: true

    # OpenSearch connection configuration
    opensearch:
      host: "opensearch.openchoreo-observability-plane.svc.cluster.local"
      port: "9200"
      authentication:
        basicauth:
          username: "admin"
          password: "admin"
      tls: false
      tlsVerify: false

    parser:
      name: docker
      format: json
      timeKey: time
      timeFormat: "%Y-%m-%dT%H:%M:%S.%L"
      timeKeep: true

  rbac:
    create: true
    serviceAccountName: fluent-bit

  hostPaths:
    varLog: /var/log
    dockerContainers: /var/lib/docker/containers

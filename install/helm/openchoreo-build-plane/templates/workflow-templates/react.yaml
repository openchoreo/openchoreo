{{ if .Values.global.defaultResources.enabled }}
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: react
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "15"
  labels:
    {{- include "openchoreo-build-plane.labels" . | nindent 4 }}
spec:
  entrypoint: build-workflow
  arguments:
    parameters:
      - name: node-version
  templates:
    - name: build-workflow
      steps:
        - - name: clone-step
            template: clone-step
        - - name: build-step
            template: build-step
            arguments:
              parameters:
                - name: git-revision
                  value: '{{ "{{" }}steps.clone-step.outputs.parameters.git-revision{{ "}}" }}'
        - - name: push-step
            template: push-step
            arguments:
              parameters:
                - name: git-revision
                  value: '{{ "{{" }}steps.clone-step.outputs.parameters.git-revision{{ "}}" }}'
        - - name: workload-create-step
            template: workload-create-step
            arguments:
              parameters:
                - name: image
                  value: '{{ "{{" }}steps.push-step.outputs.parameters.image{{ "}}" }}'
    - name: clone-step
      outputs:
        parameters:
          - name: git-revision
            valueFrom:
              path: /tmp/git-revision.txt
      container:
        args:
          - |-
            set -e

            BRANCH={{ "{{" }}workflow.parameters.branch{{ "}}" }}
            REPO={{ "{{" }}workflow.parameters.git-repo{{ "}}" }}
            COMMIT={{ "{{" }}workflow.parameters.commit{{ "}}" }}

            if [[ -n "$COMMIT" ]]; then
                echo "Cloning specific commit: $COMMIT"
                git clone --no-checkout --depth 1 "$REPO" /mnt/vol/source
                cd /mnt/vol/source
                git config --global advice.detachedHead false
                git fetch --depth 1 origin "$COMMIT"
                git checkout "$COMMIT"
                echo -n "$COMMIT" | cut -c1-8 > /tmp/git-revision.txt
            else
                echo "Cloning branch: $BRANCH with latest commit"
                git clone --single-branch --branch $BRANCH --depth 1 "$REPO" /mnt/vol/source
                cd /mnt/vol/source
                COMMIT_SHA=$(git rev-parse HEAD)
                echo -n "$COMMIT_SHA" | cut -c1-8 > /tmp/git-revision.txt
            fi
        command:
          - sh
          - -c
        image: alpine/git
        name: ""
        volumeMounts:
          - mountPath: /mnt/vol
            name: workspace
    - name: build-step
      inputs:
        parameters:
          - name: git-revision
      container:
        args:
          - |-
            set -e

            WORKDIR="/mnt/vol/source"
            CACHE_DIR="/shared/podman/cache"

            IMAGE="{{ "{{" }}workflow.parameters.image-name{{ "}}" }}:{{ "{{" }}workflow.parameters.image-tag{{ "}}" }}-{{ "{{" }}inputs.parameters.git-revision{{ "}}" }}"
            APP_PATH="{{ "{{" }}workflow.parameters.app-path{{ "}}" }}"
            NODE_VERSION="{{ "{{" }}workflow.parameters.node-version{{ "}}" }}"

            #####################################################################
            # 1. Prepare workspace and locate source
            #####################################################################
            cd "${WORKDIR}"

            # Remove leading slash from APP_PATH if present
            APP_PATH_CLEAN=$(echo "$APP_PATH" | sed 's|^/||')

            # Determine source directory - if APP_PATH is specified, use it, otherwise use current directory
            if [ -n "$APP_PATH_CLEAN" ] && [ -d "$APP_PATH_CLEAN" ]; then
                SOURCE_DIR="$APP_PATH_CLEAN"
            else
                SOURCE_DIR="."
            fi

            echo "Building from source directory: $SOURCE_DIR"
            #####################################################################
            # 2. Build React: Custom Dockerfile + Nginx
            #####################################################################
            cat > "${SOURCE_DIR}/Dockerfile" <<EOF
            FROM node:${NODE_VERSION}-alpine AS builder
            RUN npm install -g pnpm
            WORKDIR /app
            COPY . .
            RUN if [ -f "package-lock.json" ]; then npm ci; \\
                elif [ -f "yarn.lock" ]; then yarn install --frozen-lockfile; \\
                elif [ -f "pnpm-lock.yaml" ]; then pnpm install --frozen-lockfile; \\
                else echo "No lock file found" && exit 1; fi
            RUN npm run build || yarn run build || pnpm run build

            FROM nginx:alpine
            COPY --from=builder /app/default.conf /etc/nginx/conf.d/default.conf
            COPY --from=builder /app/build /usr/share/nginx/html/
            EOF

            cat > "${SOURCE_DIR}/default.conf" <<'EOF'
            server {
              listen 80;
              location / {
                root   /usr/share/nginx/html;
                index  index.html;
                try_files $uri /index.html;
              }
            }
            EOF

            podman build -t "$IMAGE" -f "${SOURCE_DIR}/Dockerfile" "$SOURCE_DIR"
            podman save -o /mnt/vol/app-image.tar "$IMAGE"
        command:
          - sh
          - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /mnt/vol
            name: workspace
          - mountPath: /shared/podman/cache
            name: podman-cache
    - name: push-step
      inputs:
        parameters:
          - name: git-revision
      outputs:
        parameters:
          - name: image
            valueFrom:
              path: /tmp/image.txt
      container:
        args:
          - |-
            set -e

            #####################################################################
            # 1. Inputs
            #####################################################################
            GIT_REVISION={{ "{{" }}inputs.parameters.git-revision{{ "}}" }}
            IMAGE_NAME={{ "{{" }}workflow.parameters.image-name{{ "}}" }}
            IMAGE_TAG={{ "{{" }}workflow.parameters.image-tag{{ "}}" }}
            SRC_IMAGE="${IMAGE_NAME}:${IMAGE_TAG}-${GIT_REVISION}"

            #####################################################################
            # 2. Registry endpoints from Helm values
            #    - type: "local" or "external"
            #    - choose the right push/pull endpoints
            #####################################################################
            REGISTRY_TYPE="{{ .Values.global.defaultResources.registry.type | default "local" }}"

            if [ "${REGISTRY_TYPE}" = "local" ]; then
              REGISTRY_PULL="{{ .Values.global.defaultResources.registry.local.pullEndpoint }}"
              REGISTRY_PUSH="{{ .Values.global.defaultResources.registry.local.pushEndpoint }}"
            else
              REGISTRY_PULL="{{ .Values.global.defaultResources.registry.external.endpoint }}"
              REGISTRY_PUSH="{{ .Values.global.defaultResources.registry.external.endpoint }}"
            fi

            #####################################################################
            # 3. Podman storage configuration
            #####################################################################
            mkdir -p /etc/containers
            cat <<EOF > /etc/containers/storage.conf
            [storage]
            driver = "overlay"
            runroot = "/run/containers/storage"
            graphroot = "/var/lib/containers/storage"
            [storage.options.overlay]
            mount_program = "/usr/bin/fuse-overlayfs"
            EOF

            #####################################################################
            # 4. Load the tarred image and push to the selected registry
            #####################################################################
            podman load -i /mnt/vol/app-image.tar

            podman tag $SRC_IMAGE $REGISTRY_PUSH/$SRC_IMAGE
            podman push --tls-verify=false $REGISTRY_PUSH/$SRC_IMAGE

            #####################################################################
            # 5. Emit image reference (for later steps/kubelet pulls)
            #####################################################################
            echo -n "$REGISTRY_PULL/$SRC_IMAGE" > /tmp/image.txt

        command:
          - sh
          - -c
        image: ghcr.io/openchoreo/podman-runner:v1.0
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /mnt/vol
            name: workspace
    - name: workload-create-step
      inputs:
        parameters:
          - name: image
      outputs:
        parameters:
          - name: workload-cr
            valueFrom:
              path: /mnt/vol/workload-cr.yaml
      container:
        image: ghcr.io/openchoreo/podman-runner:v1.0
        command: [ sh, -c ]
        args:
          - |-
            set -e

            #####################################################################
            # 1. Initialize variables
            #####################################################################
            IMAGE={{ "{{" }}inputs.parameters.image{{ "}}" }}
            PROJECT_NAME={{ "{{" }}workflow.parameters.project-name{{ "}}" }}
            COMPONENT_NAME={{ "{{" }}workflow.parameters.component-name{{ "}}" }}
            APP_PATH="{{ "{{" }}workflow.parameters.app-path{{ "}}" }}"

            DESCRIPTOR_PATH="/mnt/vol/source${APP_PATH:+/${APP_PATH#/}}"

            OUTPUT_PATH="/mnt/vol/workload-cr.yaml"

            echo "Creating workload with image: ${IMAGE}"
            echo "Using descriptor in: ${DESCRIPTOR_PATH}"

            #####################################################################
            # 2. Podman storage configuration
            #####################################################################
            mkdir -p /etc/containers
            cat <<EOF > /etc/containers/storage.conf
            [storage]
            driver = "overlay"
            runroot = "/run/containers/storage"
            graphroot = "/var/lib/containers/storage"
            [storage.options.overlay]
            mount_program = "/usr/bin/fuse-overlayfs"
            EOF

            #####################################################################
            # 3. Create workload CR and export to output
            #####################################################################
            podman run --rm --network=none \
            -v $DESCRIPTOR_PATH:/app:rw -w /app \
            ghcr.io/openchoreo/openchoreo-cli:{{ .Chart.AppVersion }} \
              create workload \
              --project "${PROJECT_NAME}" \
              --component "${COMPONENT_NAME}" \
              --image "${IMAGE}" \
              --descriptor "workload.yaml" \
              -o "workload-cr.yaml"

            # Copy output CR to the shared volume
            cp -f "${DESCRIPTOR_PATH}/workload-cr.yaml" "${OUTPUT_PATH}"
        volumeMounts:
          - name: workspace
            mountPath: /mnt/vol
        securityContext:
          privileged: true
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: openchoreo.dev/noderole
                operator: In
                values:
                  - workflow-runner
  ttlStrategy:
    secondsAfterFailure: 3600
    secondsAfterSuccess: 3600
  volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: workspace
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
  volumes:
    - hostPath:
        path: /shared/podman/cache
        type: DirectoryOrCreate
      name: podman-cache
{{ end }}

# Global values shared across all components
global:
  # Common labels to add to all resources
  commonLabels: {}

# Customizing OpenSearch configurations
opensearch:
  image:
    repository: opensearchproject/opensearch
    tag: "2.11.0"
    pullPolicy: IfNotPresent
  
  service:
    type: NodePort
    httpPort: 9200
    transportPort: 9300
    # NodePort configuration for cross-cluster access
    nodePort: 30920  # Fixed port for external access from other clusters
  
  config:
    clusterName: opensearch-cluster
    discoveryType: single-node
    javaOpts: "-Xms512m -Xmx512m"
    memoryLock: false
    disableSecurity: true
  
  authentication:
    basicAuth:
      username: admin
      password: admin
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 512Mi
  
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 5Gi
  
  replicas: 1

# Customizing OpenSearch Dashboards configurations
opensearchDashboard:
  image:
    repository: opensearchproject/opensearch-dashboards
    tag: "2.11.0"
    pullPolicy: IfNotPresent
  
  service:
    type: NodePort
    port: 5601
  
  config:
    disableSecurity: true
  
  replicas: 1

# OpenChoreo Observer Service Configuration
observer:
  replicas: 1
  
  image:
    repository: ghcr.io/openchoreo/observer
    tag: ""  # If no value is set, use Chart.AppVersion
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8080
  
  logLevel: info
  
  prometheus:
    # Prometheus server address (will be constructed from helm release name)
    address: ""  # If no value is set, use observability-plane-promet-prometheus:9090
    timeout: 30s
  
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Prometheus configuration
prometheus:
  # Use public registries instead of ACR for Kind deployment
  global:
    imageRegistry: ""
    imagePullSecrets: []
  
  # Disable features not needed for local development
  grafana:
    enabled: false
  
  # Alertmanager configuration
  alertmanager:
    enabled: false
    alertmanagerSpec:
      # Remove topology constraints for Kind
      topologySpreadConstraints: []
      # Use Kind storage class
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: standard
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 2Gi
    
  # Basic Kubernetes monitoring
  kubeApiServer:
    enabled: false
  kubelet:
    enabled: true
  kubeControllerManager:
    enabled: false
  coreDns:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeStateMetrics:
    enabled: true
  kubeScheduler:
    enabled: false
  kubeProxy:
    enabled: false
  nodeExporter:
    enabled: false
    
  # Prometheus Operator configuration
  prometheusOperator:
    kubeletService:
      enabled: false
  
  # Prometheus instance configuration
  prometheus:
    prometheusSpec:
      # Remove topology constraints for Kind
      topologySpreadConstraints: []
      # Enable flexible ServiceMonitor discovery across all namespaces
      serviceMonitorSelector: {}
      serviceMonitorNamespaceSelector: {}
      # Use Kind storage class
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: standard
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
  
  # Kube-state-metrics configuration for Kind
  kube-state-metrics:
    # Remove topology constraints for Kind
    topologySpreadConstraints: []
    # Enable Choreo pod labels as metrics
    metricLabelsAllowlist:
      - "pods=[component-name,environment-name,organization-name,project-name]"
    # Ensure kube_pod_labels metric is collected
    metricAllowlist:
      - kube_pod_labels
      - kube_pod_info
      - kube_pod_status_phase
      - kube_pod_container_resource_requests
      - kube_pod_container_resource_limits
  

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "openchoreo.fullname" . }}-ui
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "openchoreo.labels" . | nindent 4 }}
    app.kubernetes.io/component: backstage
spec:
  replicas: {{ .Values.backstage.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/component: backstage
      {{- include "openchoreo.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: backstage
        {{- include "openchoreo.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "openchoreo.backstage.serviceAccountName" . }}
      {{- if .Values.backstage.priorityClass.create }}
      priorityClassName: {{ .Values.backstage.priorityClass.name }}
      {{- end }}
      {{- with .Values.backstage.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backstage.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backstage.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backstage.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backstage.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: backstage
        image: "{{ .Values.backstage.image.repository }}:{{ .Values.backstage.image.tag }}"
        imagePullPolicy: {{ .Values.backstage.image.pullPolicy }}
        ports:
        - containerPort: 7007
          name: http
          protocol: TCP
        env:
        {{- if .Values.backstage.env }}
        {{- toYaml .Values.backstage.env | nindent 8 }}
        {{- end }}
        - name: OPENCHOREO_API_URL
          value: {{ .Values.backstage.openchoreoApi.url | default (printf "http://%s-api.%s.svc.cluster.local:8080/api/v1" (include "openchoreo.fullname" .) .Release.Namespace) }}
        - name: BACKEND_SECRET
          valueFrom:
            secretKeyRef:
              name: backstage-secrets
              key: backend-secret
        {{- if .Values.asgardeoThunder.enabled }}
        - name: THUNDER_BASE_URL
          value: {{ .Values.backstage.thunder.baseUrl | default (printf "http://%s-asgardeo-thunder.%s.svc.cluster.local:%d" (include "openchoreo.fullname" .) .Release.Namespace (.Values.asgardeoThunder.service.port | int)) }}
        {{- if .Values.backstage.thunder.token }}
        - name: THUNDER_TOKEN
          value: {{ .Values.backstage.thunder.token | quote }}
        {{- end }}
        - name: OPENCHOREO_AUTH_AUTHORIZATION_URL
          value: {{ .Values.backstage.auth.authorizationUrl | default (printf "%s/oauth2/authorize" (.Values.backstage.thunder.baseUrl | default (printf "http://%s-asgardeo-thunder.%s.svc.cluster.local:%d" (include "openchoreo.fullname" .) .Release.Namespace (.Values.asgardeoThunder.service.port | int)))) }}
        - name: OPENCHOREO_AUTH_TOKEN_URL
          value: {{ .Values.backstage.auth.tokenUrl | default (printf "%s/oauth2/token" (.Values.backstage.thunder.baseUrl | default (printf "http://%s-asgardeo-thunder.%s.svc.cluster.local:%d" (include "openchoreo.fullname" .) .Release.Namespace (.Values.asgardeoThunder.service.port | int)))) }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /healthcheck
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthcheck
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.backstage.resources | nindent 12 }}
        {{- with .Values.backstage.containerSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
